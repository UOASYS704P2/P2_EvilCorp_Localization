/***********************************************************************************************//**
 * \file   main.c
 * \brief  Silicon Labs Empty Example Project
 *
 * This example demonstrates the bare minimum needed for a Blue Gecko C application
 * that allows Over-the-Air Device Firmware Upgrading (OTA DFU). The application
 * starts advertising after boot and restarts advertising after a connection is closed.
 ***************************************************************************************************
 * <b> (C) Copyright 2016 Silicon Labs, http://www.silabs.com</b>
 ***************************************************************************************************
 * This file is licensed under the Silabs License Agreement. See the file
 * "Silabs_License_Agreement.txt" for details. Before using this software for
 * any purpose, you must agree to the terms of that agreement.
 **************************************************************************************************/

/* Board headers */
#include "boards.h"
#include "ble-configuration.h"
#include "board_features.h"

/* Bluetooth stack headers */
#include "bg_types.h"
#include "native_gecko.h"
#include "gatt_db.h"
#include "aat.h"

/* Libraries containing default Gecko configuration values */
#include "em_emu.h"
#include "em_cmu.h"
#ifdef FEATURE_BOARD_DETECTED
#include "bspconfig.h"
#include "pti.h"
#endif

/* Device initialization header */
#include "InitDevice.h"

#ifdef FEATURE_SPI_FLASH
#include "em_usart.h"
#include "mx25flash_spi.h"
#endif /* FEATURE_SPI_FLASH */



#ifndef MAX_CONNECTIONS
#define MAX_CONNECTIONS 4
#endif
uint8_t bluetooth_stack_heap[DEFAULT_BLUETOOTH_HEAP(MAX_CONNECTIONS)];

#ifdef FEATURE_PTI_SUPPORT
static const RADIO_PTIInit_t ptiInit = RADIO_PTI_INIT;
#endif

/* Gecko configuration parameters (see gecko_configuration.h) */
static const gecko_configuration_t config = {
  .config_flags = 0,
  .sleep.flags = SLEEP_FLAGS_DEEP_SLEEP_ENABLE,
  .bluetooth.max_connections = MAX_CONNECTIONS,
  .bluetooth.heap = bluetooth_stack_heap,
  .bluetooth.heap_size = sizeof(bluetooth_stack_heap),
  .bluetooth.sleep_clock_accuracy = 100, // ppm
  .gattdb = &bg_gattdb_data,
  .ota.flags = 0,
  .ota.device_name_len = 3,
  .ota.device_name_ptr = "OTA",
  #ifdef FEATURE_PTI_SUPPORT
  .pti = &ptiInit,
  #endif
};

/* Flag for indicating DFU Reset must be performed */
uint8_t boot_to_dfu = 0;

int _write_r(struct _reent *r, int fd, const void *data, unsigned int count) {
    char *c = (char *)data;
    for (unsigned int i = 0; i < count; i++) {
        USART_Tx(USART0, c[i]);
    }
    return count;
}


void main(void)
{
#ifdef FEATURE_SPI_FLASH
  /* Put the SPI flash into Deep Power Down mode for those radio boards where it is available */
  MX25_init();
  MX25_DP();
  /* We must disable SPI communication */
  USART_Reset(USART1);

#endif /* FEATURE_SPI_FLASH */

  /* Initialize peripherals */
  enter_DefaultMode_from_RESET();

  /* Initialize stack */
  gecko_init(&config);
  int _conn_handle;


  while (1) {

    /* Event pointer for handling events */
    struct gecko_cmd_packet* evt;

    /* Check for stack event. */
    evt = gecko_wait_event();

    /* Handle events */
    switch (BGLIB_MSG_ID(evt->header)) {
      /* This boot event is generated when the system boots up after reset.
       * Here the system is set to start advertising immediately after boot procedure. */
      case gecko_evt_system_boot_id:

        /* Initialize iBeacon ADV data */

    	gecko_cmd_hardware_set_soft_timer(328000, 1, 0);

    	gecko_cmd_le_connection_get_rssi(_conn_handle);

    	gecko_cmd_le_gap_set_scan_parameters(0x0010,0x0010,0);

    	gecko_cmd_le_gap_discover(2);

    	printf("\n\r");
        printf("++++boot++++");
        break;


      case gecko_evt_le_connection_opened_id:
      {
          	_conn_handle = evt->data.evt_le_connection_opened.connection;
          	printf("++connected!!++");
       }
       break;

      case gecko_evt_le_connection_rssi_id:
          	{
          	printf("++++connection_rssi_evt++++");
          	printf("\n\r");
          	struct gecko_msg_le_connection_rssi_evt_t *pStatus;
          	pStatus = &(evt->data.evt_le_connection_rssi);
      		uint8_t rssi_id;
          	rssi_id = pStatus->rssi;
          	printf("%d",rssi_id);
          	printf("\n\r");
          	}
          break;

          /* Event id */
       case gecko_evt_le_gap_scan_response_id:
          {
           printf("++++scan_rssi_evt++++");
           printf("\n\r");
           struct gecko_msg_le_gap_scan_response_evt_t *pStatus;
           pStatus = &(evt->data.evt_le_gap_scan_response);
                 		uint8_t rssi_id;
                     	rssi_id = pStatus->rssi;
                     	printf("%d",rssi_id);
                     	printf("\n\r");
                     	printf("RSSI is %d dB",rssi_id-256);
                     	printf("\n\r");
                     	}
                     break;

     default:
        break;
    }


  }
}

